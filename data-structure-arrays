//*****////forEach the forEach() method accepts a function that will work on each array item.

const fruits = ['kiwi','mango','apple','pear'];
function appendIndex(fruit, index) {
    console.log(`${index}. ${fruit}`)
}
fruits.forEach(appendIndex);

//0. kiwi
//1. mango
//2. apple
//3. pear

//*****////filter, filters items based on specific test, the filter() method also accepts a function 
//*****////and that function performs some work on each of the items in the array.

const nums = [0,10,20,30,40,50];
nums.filter( function(num) {
    return num > 20;
})

//[30,40,50]


//*****////Map method,This method is used to map each array item over to another array's item
//*****////based on whatever work is performed inside the function that is passed-in to the map as a parameter. 

[0,10,20,30,40,50].map( function(num) {
    return num / 10
})

//[0,1,2,3,4,5]


//*****////Working with Objects in JavaScript

const result = [];
const drone = {
    speed: 100,
    color: 'yellow'
}
const droneKeys = Object.keys(drone);
droneKeys.forEach( function(key) {
    result.push(key, drone[key])
})
console.log(result)

//['speed',100,'color','yellow']

//*****////Working with Maps in JavaScript

let bestBoxers = new Map();
bestBoxers.set(1, "The Champion");
bestBoxers.set(2, "The Runner-up");
bestBoxers.set(3, "The third place");

console.log(bestBoxers);

//Map(3)Â {1 => 'The Champion', 2 => 'The Runner-up', 3 => 'The third place'}
//to get a specific value, you need to use the get() method. For example:  
bestBoxers.get(1); // 'The Champion'

//*****////Working with Sets in JavaScript

const repetitiveFruits = ['apple','pear','apple','pear','plum', 'apple'];
const uniqueFruits = new Set(repetitiveFruits);
console.log(uniqueFruits);

//{'apple', 'pear', 'plum'}

